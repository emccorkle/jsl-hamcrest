
/* 
	Class: UtCompositeReporter
		---Prototype---
		class UtCompositeReporter inherits UtReporter
		---------------
*/
Define Class("UtCompositeReporter",
	Base Class( "UtReporter" ),
	reporters = {};
	_init_ = Method( {reporters},
		this:reporters = reporters
	);
	add expression failure = Method( {label, payload=Empty()},
		this:reporters << add expression failure( label, Name Expr( payload ) )
	);
	add failure = Method( {label, test expr, description, mismatch, lre, payload=Empty()},
		this:reporters << add failure( label, Name Expr( test expr ), description, mismatch, lre, Name Expr( payload ) )
	);
	add unexpected throw = Method( {label, test expr, description, exception, payload=Empty()},
		this:reporters << add unexpected throw( label, Name Expr( test expr ), description, exception, Name Expr( payload ) )
	);
	add success = Method( {label, test expr, description, payload=Empty()},
		this:reporters << add success( label, Name Expr( test expr ), description, Name Expr( payload ) )
	);
	add skip = Method( {label, test expr, description, skip description, payload=Empty()},
		this:reporters << add skip( label, Name Expr( test expr ), description, skip description, Name Expr( payload ) )
	);
);

// Function: ut composite reporter
// Factory for <UtCompositeReporter>
ut composite reporter = Function({reporters},
	New Object( "UtCompositeReporter"( reporters ) )
);
