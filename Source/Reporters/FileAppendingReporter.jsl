// Copyright © 2019, SAS Institute Inc., Cary, NC, USA.  All Rights Reserved.
// SPDX-License-Identifier: Apache-2.0

Names Default To Here( 0 );

/*
	Class: UtFileAppendingReporter
		---Prototype---
		class UtFileAppendingReporter inherits UtReporter
		---------------
*/
Define Class(
	"UtFileAppendingReporter",
	Base Class( "UtReporter" ),
	
	filepath = "";
	
	_init_ = Method({filepath, write successes, write skips},
		this:filepath = filepath;
		this:write successes = write successes;
		this:write skips = write skips;
		Save Text File( filepath, "" );
	);

	// Function: add expression failure
	add expression failure = Method( {label, payload=Empty()},
		add failure( label, "test expr", "is an expression", "was not an expression", Empty(), Name Expr( payload ) );
	);

	// Function: add failure
	add failure = Method( {label, test expr, description, mismatch, lre, payload=Empty()},
		shortDescription = If( Length( description ) > 40,
			Left( description, 30 ) || " ...",
			description
		);
		
		failure = "";
		failure ||= Eval Insert( "\!NFAILURE: ^Name Expr(test expr)^ ^shortDescription^ (^ut format test label(label)^) " );
		failure ||= Eval Insert( "\!N         Actual: ^mismatch^\!N       Expected: ^description^" );
		
		If( !IsEmpty( LRE ),
			failure ||= Eval Insert( "\!N            LRE: ^LRE^" );
		);
		
		Save Text File( filepath, failure, Mode( "Append" ) );
		0;
	);
	
	// Function: add unexpected throw
	add unexpected throw = Method( {label, test expr, description, exception, payload=Empty()},
		add failure( label, Name Expr( test expr ), description, "threw \!"" || exception || "\!"", empty(), Name Expr( payload ) );
	);
	
	// Function: add success
	add success = Method( {label, test expr, description, payload=Empty()},
		shortDescription = If( Length( description ) > 40,
			Left( description, 30 ) || " ...",
			description
		);

		If(this:write successes,
			success = Eval Insert( "\!NSUCCESS: ^Name Expr(test expr)^ ^shortDescription^ (^ut format test label(label)^)" );
			Save Text File( filepath, success, Mode( "Append" ) );
		);
		1;
	);
	
	add skip = Method( {label, test expr, description, skip description, payload=Empty()},
		If(this:write skips,
			shortDescription = If( Length( description ) > 40,
				Left( description, 30 ) || " ...",
				description
			);
			If(Is Empty(Name Expr(test expr)) & Length(description) == 0,
				msg = "";
				msg ||= Eval Insert( "\!NSKIPPED: Entire test (^ut format test label(label)^) " );
				msg ||= Eval Insert( "\!N        Skipped: ^skip description^" );
			,
				short description = If( Length( description ) > 40, Left( description, 30 ) || " ...", description );
				msg = "";
				msg ||= Eval Insert( "\!NSKIPPED: ^Name Expr(test expr)^ ^short description^ (^ut format test label(label)^) " );
				msg ||= Eval Insert( "\!N        Skipped: ^skip description^\!N       Expected: ^description^" );
			);
			Save Text File( filepath, msg, Mode( "Append" ) );
		);
		1;
	);
);

/*  Function: ut file appending reporter
      Reporter which appends failures as they happen to an output file.

      Factory for <UtFileAppendingReporter>.
   
    Arguments:
	  file - filepath for output file
	  write successes - 1 to write successes to the file, 0 otherwise (default)
	  write skips - 1 to write skips to the file, 0 otherwise (default)
    
    Example:
    ---JSL---
    ut global reporter = ut file appending reporter( "$DESKTOP/report.txt" );
    ---------
*/
ut file appending reporter = Function({file, write successes=0, write skips=0},
	New Object( "UtFileAppendingReporter"( file, write successes, write skips ) );
);