// Copyright © 2019, SAS Institute Inc., Cary, NC, USA.  All Rights Reserved.
// SPDX-License-Identifier: Apache-2.0 

Names Default To Here( 0 );

/*
Class: UtJunitXMLReporter

---Prototype---
class UtJunitXMLReporter inherits UtReporter
---------------
Collect failure information about test cases.
Then issue a report in JUnitXML format on demand.

Example of JunitXML format:

====== Text ======
<?xml version="1.0" encoding="UTF-8" ?> 
<testsuites id="20140612_170519" name="New_configuration (14/06/12 17:05:19)" tests="225" failures="1262" time="0.001">
  <testsuite id="codereview.cobol.analysisProvider" name="COBOL Code Review" tests="45" failures="17" time="0.001">
    <testcase id="codereview.cobol.rules.ProgramIdRule" name="Use a program name that matches the source file name" time="0.001">
      <failure message="PROGRAM.cbl:2 Use a program name that matches the source file name" type="WARNING">
        WARNING: Use a program name that matches the source file name
        Category: COBOL Code Review – Naming Conventions
        File: /project/PROGRAM.cbl
        Line: 2
      </failure>
    </testcase>
  </testsuite>
</testsuites>
==================
*/

Define Class(
  "UtJunitXMLReporter",
  Base Class( "UtReporter" ),

  // Variable: hash_results
  // associative array of the test results
  // test suite => test case => successes, failures, throws
  hash_results = [=>[=>]];

  // Variable: n successes
  n successes = 0;

  // Variable: n failures
  n failures = 0;

  // Variable: n unexpected throws
  n unexpected throws = 0;

  base dir = "";

  _init_ = Method({base dir},
    If( NItems( Words(base dir, "/\") ) > 1,
      Throw( "UtJunitXMLReporter requires base dir to be a single directory's name." );
    );
    this:base dir = If( Length(base dir) != 1,
                        // Remove any separators
                        Substitute( base dir, "\", "", "/", "" )
                      , // special case for "/" or "\" to get a full path
                        base dir
                    );

  );

  /*
  Method: add to hash

  ---Prototype---
  add to hash(curr_suite, curr_test, result)
  ---------------
  Adds the result of a test to hash_results

  Arguments:
    curr_suite - the name of the test suite
    curr_test - the name of the test
    result - the result of the test
  */
  add to hash = Method({curr_suite, curr_test, result},
    If(Contains(this:hash_results << get keys, curr_suite),
      If(Contains(this:hash_results[curr_suite] << get keys, curr_test),
        Insert Into(this:hash_results[curr_suite][curr_test], result);
        ,
        this:hash_results[curr_suite][curr_test] = Eval List({result});
      )
      ,
      result_list = Eval List({result});
      this:hash_results[curr_suite] = Associative Array(Eval List({curr_test}), Eval List({result_list}));
    );
  );

  /*
  Method: get file path

  ---Prototype---
  get file path()
  ---------------
  Gets the file path that the test came from.
  The path will be relative to the base dir if provided.
  */
  get file path = Method( {},
    If( Include File List()[1] == "",
      Return("")
    );
    full path = Convert File Path( Include File List()[1] );
    If( this:base dir == "/" | this:base dir == "\",
      Return(full path)
    );
    dirs = Words( full path, "/\");
    path start = Contains( dirs, this:base dir );
    If( path start,
      Concat Items( dirs[path start::NItems(dirs)], "/" )
    ,
      Word( -1, full path, "/\" )
    );
  );

  // Function: add expression failure
  add expression failure = Method( {label, payload=Empty()},
      add failure( label, "test expr", "is an expression", "was not an expression", Empty(), Name Expr( payload ) );
  );

  // Function: add failure
  add failure = Method( {label, test expr, description, mismatch, lre, payload=Empty()},
    char test expr = If( Is Expr( Name Expr( test expr ) ),
      Char( Name Expr( test expr ) ),
      Char( test expr )
    ) || " ";
    parsed_label = this:parse_label(label);
    curr_suite = parsed_label[1];
    curr_test = parsed_label[2];
    fail_msg = "Expected: " || char test expr || description || "\!n";
    fail_msg ||= "But: " || mismatch || "\!n" ;
    fail_msg = Trim(fail_msg);
    fail_hash = Associative Array(Eval List({"failure"}), Eval List({fail_msg}));
    fail_hash["@file"] = get file path();
    this:add to hash(curr_suite, curr_test, fail_hash);
    this:n failures++;
    0;
  );

  // Function: add unexpected throw
  add unexpected throw = Method( {label, test expr, description, exception, payload=Empty()},
    char test expr = If( Is Expr( Name Expr( test expr ) ),
      Char( Name Expr( test expr ) ),
      Char( test expr )
    ) || " ";
    parsed_label = this:parse_label(label);
    curr_suite = parsed_label[1];
    curr_test = parsed_label[2];
    throw_msg = "  Expected: " || char test expr || description || "\!n";
    If( Is Empty( exception ),
      throw_msg ||= "But: " || "unexpectedly threw nothing\!n",
      throw_msg ||= "But: " || "unexpectedly threw \!"" || exception || "\!"\!n";
    );
    throw_msg = Trim(throw_msg);
    throw_hash = Associative Array(Eval List({"error"}), Eval List({throw_msg}));
    throw_hash["@file"] = get file path();
    this:add to hash(curr_suite, curr_test, throw_hash);
    this:n unexpected throws++;
    0;
  );

  // Function: add success
  add success = Method( {label, test expr, description, payload=Empty()},
    parsed_label = this:parse_label(label);
    curr_suite = parsed_label[1];
    curr_test = parsed_label[2];
    // empty for a success
    success_hash = Associative Array();
    success_hash["@file"] = get file path();
    this:add to hash(curr_suite, curr_test, success_hash);
    this:n successes++;
    1;
  );

  /*
  Method: generate_xml_tag

  ---Prototype---
  generate_xml_tag(<tag>, <content>, <properties>)
  ---------------
  Takes in a tag as a string and content, puts the content into the tag in xml format

  Arguments:
    tag - String that the tag should be
    content - Content that goes inside the string [string]
    properties - Associative array with properties as keys and the values
    escape_content_flag - 1 if content should have &, < and > escaped, 0 otherwise

  Example:
    ---JSL---
    test = generate_xml_tag("test", "content", ["prop"=>1]);
    ---Text---
    Expected Return:
      <test prop="1">
        content
      </test>
    ---------
  */

  generate_xml_tag = Method({tag, content, properties, escape_content_flag=1},
    xml_tag = "<" || tag;
    props = properties << get keys;
    vals = properties << get values;
    For(i=1, i<=N Items(props), i++,
      name = props[i];
      If(Type(name) != "String",
        Throw("property argument has a non string key found type:" || Type(name));
      );
      encoded_val = XML Encode(Char(vals[i]));
      xml_tag ||= " " || XML Encode(name) || "=\!"" || encoded_val || "\!"";
    );
    xml_tag ||= ">" || "\!n";
    If(content != "",
      // replace all newline with doublespace then newline
      Substitute Into(content, "\!n", "\!n  ");
      If(escape_content_flag,
        Substitute Into(content, "&", "&amp;", "<", "&lt;", ">", "&gt;");
      );
      xml_tag ||= "  " || content || "\!n";
    );

    xml_tag ||= "</" || tag || ">\!n";
    Return(xml_tag);
  );

  /*
  Method: get_xml_report

  ---Prototype---
  get_xml_report(<xml_results>)
  ---------------
  Takes a hash which should have test suites as keys, returns the JunitXML format
    
  Arguments:
  xml_result - Associative array where keys should be the test suites.
  
  Values will be associative arrays with test cases as keys.
  The values of those associative arrays will be failure messages with "failure" as the key.

  Example:
  ---JSL---
  xml_results = ["Example Tests" => 
                  ["Test1" => 
                    {["failure" =>
                      "Expected: add_nums(1, 1) equal to 3
                      But: was 2"
                    ]}
                  ]
                ];

  get_xml_report(xml_results);   
  ---Text---  
  Expected Return:
    <testsuites failures="1" id="20191011_175324" tests="1">
      <testsuite failures="1" name="Example Tests" tests="1">
        <testcase name="Test1">
          <failure type="failure">
            Expected: add_nums(1, 1) equal to 3
            But: was 2
          </failure>
        </testcase>
      </testsuite>
    </testsuites>
    ---------
  */

  get_xml_report = Method({xml_results},
    start_line = "<?xml version=\!"1.0\!" encoding=\!"UTF-8\!" ?>\!n";
    content = "";
    test_suites = xml_results << get keys;
    test_cases_set = xml_results << get values;
    For(i=1, i<=NItems(test_suites), i++,
      test_cases = test_cases_set[i];
      test_case_names = test_cases << get keys;
      test_case_info = test_cases << get values;
      test_case_xml = "";
      num_tests = 0;
      num_failures = 0;
      num_errors = 0;
      For(k=1, k<=NItems(test_case_names), k++,

        test_case_content = "";
        For(l=1, l<=NItems(test_case_info[k]), l++,
          num_tests += 1;
          results = test_case_info[k][l];
          If( Contains( results, "failure" ),
              result = "failure";
              num_failures += 1
          , Contains( results, "error" ),
              result = "error";
              num_errors += 1
          , // case for a success
              Continue();
          );
          props = Associative Array();
          props["type"] = result;
          failure_content = this:generate_xml_tag(result, test_case_info[k][l][result], props);
          test_case_content ||= failure_content;

        );
        props = Associative Array();
        props["classname"] = test_suites[i];
        props["name"] = test_case_names[k];
        props["file"] = test_case_info[k][1]["@file"]; // File is same across asserts so get 1st one
        test_case_xml ||= this:generate_xml_tag("testcase", trim(test_case_content), props, 0);
        
      );
      props = Associative Array();
      props["name"] = test_suites[i];
      props["tests"] = Char(num_tests);
      props["failures"] = Char(num_failures);
      props["errors"] = Char(num_errors);
      test_suite_tag = this:generate_xml_tag("testsuite", trim(test_case_xml), props, 0);
      content ||= test_suite_tag;
    );
    
    props = Associative Array();
    date = today();
    props["id"] = format(date, "yyyymmdd" ) || "_" || Char(Hour(date)) || Char(Minute(date)) || Char(Second(date));
    props["tests"] = Char(this:n successes + this:n failures + this:n unexpected throws);
    props["failures"] = Char(this:n failures);
    props["errors"] = Char(this:n unexpected throws);

    xml_result = start_line || this:generate_xml_tag("testsuites", trim(content), props, 0);
    Return(xml_result);
  );

  // Method: parse_label
  //
  // Parses a label into test suite, test name, and case
  //
  // Arguments: 
  //  label - A label separated by a separator
  // 
  // Results:
  //  The label split by the separator. The second and third values will be joined by an _
  //  The first element will be the suite name and the second will be the test name
  //  If the given label is "", current suite is named "Anonymous_Test_Suite",
  //  and the test will be the given label or "Anonymous_Test_Name"

  parse_label = Method({label},
    // TODO: Can be refactored to avoid list -> string -> list conversion
    label = ut format test label(label);
    list_label = words(label, ::ut concat test label sep);
	
    // set to anonymous test name if missing
    If(label == "",
      list_label = {"Anonymous_Test_Name"};
    );
    Match(NItems(list_label),
      4,
      curr_suite = Trim(list_label[1]);
      curr_test = Trim(list_label[2]) || "_" || Trim(list_label[3]);
      ,
      3,
      curr_suite = Trim(list_label[1]);
      curr_test = Trim(list_label[2]);
      ,
      1,
      curr_suite = "Anonymous_Test_Suite";
      curr_test = list_label[1];
    );
    Return(Eval List(List(curr_suite, curr_test)));
  );

  // Method: get report
  //
  // Get a report detailing all the successes and
  // failures for each test in JunitXML format shown in the comments at the top.
  get report = Method( {},
    this:get_xml_report(this:hash_results)
  );

  // Method: show report
  //
  // Dump a report to the log detailing all the successes and
  // failures for each test in JunitXML format shown in the comments at the top.
  show report = Method({},
    Write(this:get report());
  );
);

/*  Function: ut junit xml reporter
      Reporter which appends failures as they happen to an output file.

      Factory for <UtJUnitXMLReporter>.

    Arguments:
      base dir - Directory that the test file names will be relative to
                 in the file attribute of testcase tags.

    Example:
    With test files in test/A/ and test/B/
    ---JSL---
    ut global reporter = ut junit xml reporter( "test/" );
    ---------
    will give file attributes like "test/A/A_test1.jsl", "test/B/B_test1.jsl", etc.
*/
ut junit xml reporter = Function({ base path="" },
  New Object( "UtJunitXMLReporter"( base path ) );
);
