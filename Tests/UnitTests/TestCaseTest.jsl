// Copyright © 2019, SAS Institute Inc., Cary, NC, USA.  All Rights Reserved.
// SPDX-License-Identifier: Apache-2.0

// TODO: 
// - use ut test case(): setup/teardown
// - multiple assertions (worst is returned)
// - labels send to reporter correctly (empty labels)

// SUCCESS
test case rc = with noop reporter( Expr(
	ut test( "TestCase", "Success", Expr(
		ut assert that( Expr( 0 + 1 ), 1 );
	));
));
ut assert that( Expr( test case rc ), 1 );

// FAILURE
test case rc = with noop reporter( Expr(
	ut test( "TestCase", "Failure", Expr(
		ut assert that( Expr( 0 + 1 ), 0 );
	));
));
ut assert that( Expr( test case rc ), 0 );

// LOG FAILURE
test case rc = with noop reporter( Expr(
	ut test( "TestCase", "Failure", 
		Expr(
			Print( "Hello, world." );
		), 
		ut log bench( 1 )
	);
));
ut assert that( Expr( test case rc ), 0 );


// Reset Row() after test
Row() = 0;
assert rc = with noop reporter( Expr(
	ut test( "Reset Row", "To Unset", Expr(
		Row() = 5;
		ut assert that( Expr( Row() ), 5 );
	))
));
ut assert that( Expr( assert rc ), 1, "Row set within test" );
ut assert that( Expr( Row() ), 0, "Row restored to unset" );

Row() = 101;
assert rc = with noop reporter( Expr(
	ut test( "Reset Row", "To Unset", Expr(
		Row() = 5;
		ut assert that( Expr( Row() ), 5 );
	))
));
ut assert that( Expr( assert rc ), 1, "Row set within test" );
ut assert that( Expr( Row() ), 101, "Row restored to set" );

Row() = 201;
assert rc = with noop reporter( Expr(
	ut test( "Reset Row", "To Unset", Expr(
		Row() = 0;
		ut assert that( Expr( Row() ), 0 );
	))
));
ut assert that( Expr( assert rc ), 1, "Row unset within test" );
ut assert that( Expr( Row() ), 201, "Row restored to set" );

Local({},
	Eval(ut test assertion decorator("ut assert that", {test expr, matcher, label=""}));
	Try(exception_msg = ""; local:ut assert that());
	::ut assert that(Expr(exception_msg[1]), ut starts with("local:ut assert that has 3 parameters"));
);